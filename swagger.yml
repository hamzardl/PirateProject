openapi: 3.0.0
info:
  title: Mon API
  version: 1.0.0
servers:
  - url: http://localhost:3001/api

paths:
  /boats:
    get:
      summary: Obtenir tous les bateaux
      tags:
        - Boat
      responses:
        '200':
          description: Liste des bateaux
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Boat'
              example:
                - id: "uuid-1"
                  name: "Black Pearl"
                  goldCargo: 50000
                  created_at: "2023-10-19T00:00:00.000Z"
                  captain: "Jack Sparrow"
                  status: "sailing"
                  crewSize: 50
                  created_by: "user-uuid-1"
                  last_modified: "2023-10-19T00:00:00.000Z"
                - id: "uuid-2"
                  name: "Queen Anne's Revenge"
                  goldCargo: 10000
                  created_at: "2023-10-20T00:00:00.000Z"
                  captain: "Blackbeard"
                  status: "docked"
                  crewSize: 80
                  created_by: "user-uuid-2"
                  last_modified: "2023-10-20T00:00:00.000Z"

  /boat:
    post:
      summary: Créer un nouveau bateau
      tags:
        - Boat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoatRequest'
            example:
              name: "Flying Dutchman"
              goldCargo: 75000
              created_at: "2025-09-13T12:00:00.000Z"
              captain: "Davy Jones"
              status: "docked"
              crewSize: 150
              created_by: "user-uuid-3"
              last_modified: "2025-09-13T12:00:00.000Z"
      responses:
        '201':
          description: Bateau créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '400':
          description: Mauvaise requête

  /boat/{id}:
    delete:
      summary: Supprimer un bateau par son ID
      tags:
        - Boat
      parameters:
        - name: id
          in: path
          description: ID du bateau à supprimer (UUID)
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bateau supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Boat deleted successfully
        '404':
          description: Bateau non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Boat not found

    patch:
      summary: Modifier un bateau par son ID
      tags:
        - Boat
      parameters:
        - name: id
          in: path
          required: true
          description: ID du bateau à modifier (UUID)
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoatRequestUpdate'
            example:
              goldCargo: 88000
              captain: "Edward Teach"
              status: "lookingForAFight"
              crewSize: 120
              last_modified: "2025-09-13T14:30:00.000Z"
      responses:
        '200':
          description: Bateau modifié avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '400':
          description: Mauvaise requête
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        '404':
          description: Bateau non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Boat not found
  /auth:
    post:
      summary: Connexion utilisateur (login)
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
            example:
              username: "root"
              password: "root"
      responses:
        '200':
          description: Connexion réussie, retourne un token JWT
        '401':
          description: Authentification échouée (mauvais identifiants)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid username or password
components:
  schemas:
    Boat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        goldCargo:
          type: integer
          minimum: 0
          maximum: 1000000
        created_at:
          type: string
          format: date-time
        captain:
          type: string
        status:
          type: string
          enum:
            - docked
            - sailing
            - lookingForAFight
        crewSize:
          type: integer
          minimum: 1
          maximum: 500
        created_by:
          type: string
          format: uuid
        last_modified:
          type: string
          format: date-time

    BoatRequest:
      type: object
      required:
        - name
        - goldCargo
        - created_at
        - captain
        - status
        - crewSize
        - created_by
        - last_modified
      properties:
        name:
          type: string
        goldCargo:
          type: integer
          minimum: 0
          maximum: 1000000
        created_at:
          type: string
          format: date-time
        captain:
          type: string
        status:
          type: string
          enum:
            - docked
            - sailing
            - lookingForAFight
        crewSize:
          type: integer
          minimum: 1
          maximum: 500
        created_by:
          type: string
          format: uuid
        last_modified:
          type: string
          format: date-time

    BoatRequestUpdate:
      type: object
      properties:
        goldCargo:
          type: integer
          minimum: 0
          maximum: 1000000
        captain:
          type: string
        status:
          type: string
          enum:
            - docked
            - sailing
            - lookingForAFight
        crewSize:
          type: integer
          minimum: 1
          maximum: 500
        last_modified:
          type: string
          format: date-time
    UserDTO:
      type: object
      required:
        - userName
        - password
      properties:
        userName:
          type: string
        password:
          type: string